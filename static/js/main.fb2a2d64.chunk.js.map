{"version":3,"sources":["logo.svg","contact.jsx","contacts.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Contact","firstName","lastName","phone","gender","CONTACTS","Contacts","useState","contacts","setContacts","search","setSearch","useEffect","filter","tempSearch","toLowerCase","includes","onChange","value","target","placeholder","map","contact","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kJAAAA,EAAOC,QAAU,IAA0B,kC,oHCiB5BC,EAfC,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,OAC1C,OACI,6BACI,4BACI,4BAAKH,GACL,4BAAKC,GACL,4BAAKC,GAEDC,GAAU,4BAAKA,MCN7BC,EAAW,CAAC,CACdJ,UAAW,uCACXC,SAAU,qEACVC,MAAO,gBACPC,OAAQ,QACT,CACCH,UAAW,iCACXC,SAAU,+DACVC,MAAO,gBACPC,OAAQ,UACT,CACCH,UAAW,6CACXC,SAAU,mDACVC,MAAO,iBACR,CACCF,UAAW,iCACXC,SAAU,mDACVC,MAAO,gBACPC,OAAQ,UACT,CACCH,UAAW,uCACXC,SAAU,yDACVC,MAAO,gBACPC,OAAQ,QACT,CACCH,UAAW,uCACXC,SAAU,6CACVC,MAAO,gBACPC,OAAQ,SAkDGE,EA/CE,WAAO,IAAD,EAEaC,mBAASF,GAFtB,mBAEZG,EAFY,KAEFC,EAFE,OAGSF,mBAAS,IAHlB,mBAGZG,EAHY,KAGJC,EAHI,KAOnBC,qBACI,WACIH,EAAYJ,EAASQ,QAAO,YAAqC,IAAlCZ,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC1CW,EAAaJ,EAAOK,cAC1B,OAAQd,GAAaA,EAAUc,cAAcC,SAASF,IACjDZ,GAAYA,EAASa,cAAcC,SAASF,IAC5CX,GAASA,EAAMY,cAAcC,SAASF,SAGnD,CAACJ,IAQL,OACI,oCACI,2BACIO,SARe,SAAC,GAA2B,IAAfC,EAAc,EAAxBC,OAAUD,MACpCP,EAAUO,IAQFE,YAAY,aAGhB,6BAEQZ,EAASa,KAAI,SAACC,EAASC,GACnB,OACI,kBAAC,EAAD,eACIC,IAAKD,GACDD,UC3DrBG,MAPf,WAEE,OACE,kBAAC,EAAD,OCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fb2a2d64.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nconst Contact = ({firstName, lastName, phone, gender}) => {\r\n    return (\r\n        <div>\r\n            <ul>\r\n                <li>{firstName}</li>\r\n                <li>{lastName}</li>\r\n                <li>{phone}</li>\r\n                {\r\n                    gender && <li>{gender}</li>\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Contact;","import React, { useState, useEffect } from 'react';\r\n\r\nimport Contact from './contact';\r\n\r\nconst CONTACTS = [{\r\n    firstName: \"Барней\",\r\n    lastName: \"Стинсовский\",\r\n    phone: \"+380956319521\",\r\n    gender: \"male\",\r\n}, {\r\n    firstName: \"Робин\",\r\n    lastName: \"Щербатская\",\r\n    phone: \"+380931460123\",\r\n    gender: \"female\",\r\n}, {\r\n    firstName: \"Аномный\",\r\n    lastName: \"Анонимус\",\r\n    phone: \"+380666666666\",\r\n}, {\r\n    firstName: \"Лилия\",\r\n    lastName: \"Олдровна\",\r\n    phone: \"+380504691254\",\r\n    gender: \"female\",\r\n}, {\r\n    firstName: \"Маршэн\",\r\n    lastName: \"Эриксонян\",\r\n    phone: \"+380739432123\",\r\n    gender: \"male\",\r\n}, {\r\n    firstName: \"Теодор\",\r\n    lastName: \"Мотсбэс\",\r\n    phone: \"+380956319521\",\r\n    gender: \"male\",\r\n}];\r\n\r\nconst Contacts = () => {\r\n\r\n    const [contacts, setContacts] = useState(CONTACTS);\r\n    const [search, setSearch] = useState('');\r\n    // const [isMale, setIsMale] = useState(false);\r\n    // const [isFemale, setIsFemale] = useState(false);\r\n\r\n    useEffect(\r\n        () => {\r\n            setContacts(CONTACTS.filter(({ firstName, lastName, phone }) => {\r\n                const tempSearch = search.toLowerCase();\r\n                return (firstName && firstName.toLowerCase().includes(tempSearch)) ||\r\n                    (lastName && lastName.toLowerCase().includes(tempSearch)) ||\r\n                    (phone && phone.toLowerCase().includes(tempSearch));\r\n            }))\r\n        },\r\n        [search],\r\n    )\r\n\r\n    const handleSearchChange = ({ target: { value } }) => {\r\n        setSearch(value);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                onChange={handleSearchChange}\r\n                placeholder=\"Enter...\"\r\n\r\n            />\r\n            <div>\r\n                {\r\n                    contacts.map((contact, index) => {\r\n                        return (\r\n                            <Contact\r\n                                key={index}\r\n                                {...contact}\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Contacts;","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Contacts from './contacts';\nimport Contact from './contact';\n\nfunction App() {\n\n  return (\n    <Contacts />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}